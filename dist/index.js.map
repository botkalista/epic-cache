{"version":3,"sources":["../src/index.ts","../src/models/Time.ts","../src/models/CacheElement.ts"],"sourcesContent":["import * as cacheElement from \"./models/CacheElement\";\nimport * as time from \"./models/Time\";\nimport * as genericCache from \"./caches/GenericCache\";\n\nexport const CacheElement = cacheElement.CacheElement;\nexport const Time = time.Time;\nexport type TimeString = time.TimeString;\nexport type GenricCache = genericCache.GenericCacheOptions;\nexport type SizeExceededStrategy = genericCache.SizeExceededStrategy;","\nconst TIMEUNITS: Record<string, number> = {\n    's': 1000,\n    'm': 1000 * 60,\n    'h': 1000 * 60 * 60,\n    'd': 1000 * 60 * 60 * 24\n}\n\nexport type TimeString = `${number}${keyof typeof TIMEUNITS}`\n\nexport type TimeConstructor = TimeString | number;\n\nexport class Time {\n\n    public value: number;\n\n    constructor(data: TimeConstructor) {\n        this.value = this.convertToMilliseconds(data);\n    }\n\n    private convertToMilliseconds(data: TimeConstructor) {\n        if (typeof data === 'number') return data;\n        const numeric = parseInt(data);\n        const unit = data.replace(numeric.toString(), '');\n        const unitValue = TIMEUNITS[unit];\n        if (!unitValue) throw Error(`Invalid unit value. Received ${unit}, expected ${Object.keys(TIMEUNITS).join('or')}`);\n        return numeric * unitValue;\n    }\n\n    static from(data: TimeConstructor) {\n        const instance = new Time(data);\n        return instance;\n    }\n\n}","import { Time, TimeConstructor } from \"./Time\";\n\n\n\nexport type Expiration = TimeConstructor | Time;\n\nexport class CacheElement<ElementType = any> {\n\n    public static DEFAULT_TIMESTAMP = -1;\n\n    public value: ElementType;\n    public expireTimestamp: number = CacheElement.DEFAULT_TIMESTAMP;\n\n    constructor(value: ElementType, expireIn?: Expiration) {\n        this.value = value;\n        if (!expireIn) return;\n        if (expireIn instanceof Time) {\n            this.expireTimestamp = Date.now() + expireIn.value;\n        } else {\n            const time = Time.from(expireIn);\n            this.expireTimestamp = Date.now() + time.value;\n        }\n    }\n\n    withValue<NewValueType>(newValue: NewValueType) {\n        const instance = new CacheElement<NewValueType>(newValue);\n        instance.expireTimestamp = this.expireTimestamp;\n        return instance;\n    }\n\n    copy() {\n        const instance = new CacheElement<ElementType>(this.value);\n        instance.expireTimestamp = this.expireTimestamp;\n        return instance;\n    }\n\n    static from<TElement = any>(value: TElement, expireIn?: Expiration) {\n        const instance = new CacheElement(value, expireIn);\n        return instance;\n    }\n\n    public isExpired() {\n        if (this.expireTimestamp <= 0) return false;\n        return this.expireTimestamp < Date.now();\n    }\n\n}"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,sBAAAA;AAAA,EAAA,YAAAC;AAAA;AAAA;;;ACCA,IAAM,YAAoC;AAAA,EACtC,KAAK;AAAA,EACL,KAAK,MAAO;AAAA,EACZ,KAAK,MAAO,KAAK;AAAA,EACjB,KAAK,MAAO,KAAK,KAAK;AAC1B;AAMO,IAAM,OAAN,MAAM,MAAK;AAAA,EAEP;AAAA,EAEP,YAAY,MAAuB;AAC/B,SAAK,QAAQ,KAAK,sBAAsB,IAAI;AAAA,EAChD;AAAA,EAEQ,sBAAsB,MAAuB;AACjD,QAAI,OAAO,SAAS;AAAU,aAAO;AACrC,UAAM,UAAU,SAAS,IAAI;AAC7B,UAAM,OAAO,KAAK,QAAQ,QAAQ,SAAS,GAAG,EAAE;AAChD,UAAM,YAAY,UAAU,IAAI;AAChC,QAAI,CAAC;AAAW,YAAM,MAAM,gCAAgC,IAAI,cAAc,OAAO,KAAK,SAAS,EAAE,KAAK,IAAI,CAAC,EAAE;AACjH,WAAO,UAAU;AAAA,EACrB;AAAA,EAEA,OAAO,KAAK,MAAuB;AAC/B,UAAM,WAAW,IAAI,MAAK,IAAI;AAC9B,WAAO;AAAA,EACX;AAEJ;;;AC5BO,IAAM,eAAN,MAAM,cAAgC;AAAA,EAEzC,OAAc,oBAAoB;AAAA,EAE3B;AAAA,EACA,kBAA0B,cAAa;AAAA,EAE9C,YAAY,OAAoB,UAAuB;AACnD,SAAK,QAAQ;AACb,QAAI,CAAC;AAAU;AACf,QAAI,oBAAoB,MAAM;AAC1B,WAAK,kBAAkB,KAAK,IAAI,IAAI,SAAS;AAAA,IACjD,OAAO;AACH,YAAM,OAAO,KAAK,KAAK,QAAQ;AAC/B,WAAK,kBAAkB,KAAK,IAAI,IAAI,KAAK;AAAA,IAC7C;AAAA,EACJ;AAAA,EAEA,UAAwB,UAAwB;AAC5C,UAAM,WAAW,IAAI,cAA2B,QAAQ;AACxD,aAAS,kBAAkB,KAAK;AAChC,WAAO;AAAA,EACX;AAAA,EAEA,OAAO;AACH,UAAM,WAAW,IAAI,cAA0B,KAAK,KAAK;AACzD,aAAS,kBAAkB,KAAK;AAChC,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,KAAqB,OAAiB,UAAuB;AAChE,UAAM,WAAW,IAAI,cAAa,OAAO,QAAQ;AACjD,WAAO;AAAA,EACX;AAAA,EAEO,YAAY;AACf,QAAI,KAAK,mBAAmB;AAAG,aAAO;AACtC,WAAO,KAAK,kBAAkB,KAAK,IAAI;AAAA,EAC3C;AAEJ;;;AF1CO,IAAMC,gBAA4B;AAClC,IAAMC,QAAY;","names":["CacheElement","Time","CacheElement","Time"]}