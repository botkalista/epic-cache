{"version":3,"sources":["../src/index.ts","../src/models/Time.ts","../src/models/CacheElement.ts","../src/components/BetterEmitter.ts","../src/caches/Cache.ts","../src/caches/GenericCache.ts"],"sourcesContent":["export { CacheElement, Expiration } from \"./models/CacheElement\";\nexport { Time, TimeConstructor, TimeString } from \"./models/Time\";\nexport { GenericCache, GenericCacheOptions, SizeExceededStrategy, defaultGenericCacheOptions } from \"./caches/GenericCache\";","\nconst TIMEUNITS: Record<string, number> = {\n    's': 1000,\n    'm': 1000 * 60,\n    'h': 1000 * 60 * 60,\n    'd': 1000 * 60 * 60 * 24\n}\n\nexport type TimeString = `${number}${keyof typeof TIMEUNITS}`\n\nexport type TimeConstructor = TimeString | number;\n\nexport class Time {\n\n    public value: number;\n\n    constructor(data: TimeConstructor) {\n        this.value = this.convertToMilliseconds(data);\n    }\n\n    private convertToMilliseconds(data: TimeConstructor) {\n        if (typeof data === 'number') return data;\n        const numeric = parseInt(data);\n        const unit = data.replace(numeric.toString(), '');\n        const unitValue = TIMEUNITS[unit];\n        if (!unitValue) throw Error(`Invalid unit value. Received ${unit}, expected ${Object.keys(TIMEUNITS).join('or')}`);\n        return numeric * unitValue;\n    }\n\n    static from(data: TimeConstructor) {\n        const instance = new Time(data);\n        return instance;\n    }\n\n}","import { Time, TimeConstructor } from \"./Time\";\n\n\n\nexport type Expiration = TimeConstructor | Time;\n\nexport class CacheElement<ElementType = any> {\n\n    public static DEFAULT_TIMESTAMP = -1;\n\n    public value: ElementType;\n    public expireTimestamp: number = CacheElement.DEFAULT_TIMESTAMP;\n\n    constructor(value: ElementType, expireIn?: Expiration) {\n        this.value = value;\n        if (!expireIn) return;\n        if (expireIn instanceof Time) {\n            this.expireTimestamp = Date.now() + expireIn.value;\n        } else {\n            const time = Time.from(expireIn);\n            this.expireTimestamp = Date.now() + time.value;\n        }\n    }\n\n    withValue<NewValueType>(newValue: NewValueType) {\n        const instance = new CacheElement<NewValueType>(newValue);\n        instance.expireTimestamp = this.expireTimestamp;\n        return instance;\n    }\n\n    copy() {\n        const instance = new CacheElement<ElementType>(this.value);\n        instance.expireTimestamp = this.expireTimestamp;\n        return instance;\n    }\n\n    static from<TElement = any>(value: TElement, expireIn?: Expiration) {\n        const instance = new CacheElement(value, expireIn);\n        return instance;\n    }\n\n    public isExpired() {\n        if (this.expireTimestamp <= 0) return false;\n        return this.expireTimestamp < Date.now();\n    }\n\n}","\nexport type EventHandler<EventName> = { type: EventName, callback: (...args: any) => any }\n\nexport class BetterEmitter<EventsMap extends Record<string, (...args: any[]) => any>> {\n\n    private handlers: EventHandler<keyof EventsMap>[] = [];\n\n    protected emit<EventName extends keyof EventsMap>(event: EventName, ...data: Parameters<EventsMap[EventName]>) {\n        this.handlers.filter(handler => handler.type == event).forEach(handler => {\n            handler.callback(...data);\n        });\n        return this;\n    }\n\n    on<EventName extends keyof EventsMap>(event: EventName, callback: EventsMap[EventName]) {\n        this.handlers.push({ type: event, callback });\n        return this;\n    }\n\n}","import { BetterEmitter } from \"../components/BetterEmitter\";\nimport { CacheElement } from \"../models/CacheElement\";\n\n\ntype EventsMap<CacheType> = {\n    'get': (key: string) => any;\n    \"add\": (key: string, value: CacheElement<CacheType>) => any;\n    'expire': (key: string) => any;\n    'delete': (key: string) => any;\n}\n\nexport abstract class Cache<\n    CacheType = any,\n    CacheOptions extends Record<string, any> = {},\n    SetType = CacheType,\n    GetType = CacheType\n> extends BetterEmitter<EventsMap<CacheType>> {\n\n    protected options: Required<CacheOptions>;\n    protected cache = new Map<string, CacheElement<CacheType>>();\n\n    protected setTransform?: (key: string, element: CacheElement<SetType>) => CacheElement<CacheType>;\n    protected getTransform?: (key: string, element: CacheElement<CacheType>) => CacheElement<GetType>;\n\n    constructor(defaultOptions: Required<CacheOptions>) {\n        super();\n        this.options = defaultOptions;\n    }\n\n    _rawCache() { return this.cache; }\n    size() { return this.cache.size; }\n\n    protected option<Key extends keyof CacheOptions>(optionName: Key): CacheOptions[Key] {\n        return this.options[optionName];\n    }\n\n    private getElement(key: string) {\n        if (!this.getTransform) throw Error('processBeforeGet not called');\n        const element = this.cache.get(key);\n        this.emit('get', key);\n        const result = this.getTransform(key, element);\n        return result;\n    }\n    private setElement(key: string, element: CacheElement<SetType>) {\n        if (!this.setTransform) throw Error('processBeforeSet not called');\n        const processedElement = this.setTransform(key, element);\n        this.cache.set(key, processedElement);\n        this.emit('add', key, processedElement);\n        return this;\n    }\n    private removeElement(key: string, expired: boolean) {\n        this.emit(expired ? 'expire' : 'delete', key);\n        this.cache.delete(key);\n        return this;\n    }\n\n    private clearExpired() {\n        const toDelete: string[] = []\n        for (const key of this.cache.keys()) {\n            if (this.cache.get(key).isExpired()) toDelete.push(key);\n        }\n        toDelete.forEach(e => this.removeElement(e, true));\n    }\n\n    protected processBeforeSet(callback: typeof this.setTransform) {\n        this.setTransform = callback;\n        return this;\n    }\n    protected processBeforeGet(callback: typeof this.getTransform) {\n        this.getTransform = callback;\n        return this;\n    }\n\n    set(key: string, element: CacheElement<SetType>) {\n        return this.add(key, element);\n    }\n    add(key: string, element: CacheElement<SetType>) {\n\n        if (element.expireTimestamp == CacheElement.DEFAULT_TIMESTAMP)\n            element.expireTimestamp = Date.now() + this.options.defaultExpireTime.value;\n\n        if (this.cache.size < this.options.maxSize)\n            return this.setElement(key, element);\n\n        // maxSize reached\n\n        const hasElement = this.cache.has(key);\n        if (hasElement) return this.setElement(key, element);\n\n        if (this.options.clearExpiredOnSizeExceeded)\n            this.clearExpired();\n\n        if (this.cache.size < this.options.maxSize)\n            return this.setElement(key, element);\n\n        if (this.options.sizeExceededStrategy === 'no-cache')\n            return this;\n\n        if (this.options.sizeExceededStrategy === 'throw-error')\n            throw Error('Cache size exceeded');\n\n    }\n    get(key: string) {\n        const element = this.cache.get(key);\n        if (!element) return;\n        if (!element.isExpired()) return this.getElement(key).value;\n        this.emit('expire', key);\n        this.removeElement(key, false);\n        return;\n    }\n    del(key: string) {\n        this.removeElement(key, false);\n        return this;\n    }\n}","\nimport { Time } from \"../models/Time\";\nimport { Cache } from \"./Cache\";\n\n\nexport type SizeExceededStrategy = 'throw-error' | 'no-cache'\n\nexport type GenericCacheOptions = {\n    maxSize?: number,\n    sizeExceededStrategy?: SizeExceededStrategy,\n    clearExpiredOnSizeExceeded?: boolean,\n    defaultExpireTime?: Time,\n    expireOnInterval?: boolean,\n    expireCheckInterval?: Time\n}\n\nexport const defaultGenericCacheOptions: Required<GenericCacheOptions> = {\n    maxSize: 1000,\n    sizeExceededStrategy: 'no-cache',\n    clearExpiredOnSizeExceeded: true,\n    defaultExpireTime: Time.from('15m'),\n    expireOnInterval: true,\n    expireCheckInterval: Time.from('10m')\n}\n\nexport class GenericCache<CacheType = any> extends Cache<CacheType, GenericCacheOptions> {\n    constructor(options?: GenericCacheOptions) {\n        super({ ...defaultGenericCacheOptions, ...options });\n\n        super\n            .processBeforeGet((key, element) => element)\n            .processBeforeSet((key, element) => element)\n\n    }\n}"],"mappings":"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","names":[]}